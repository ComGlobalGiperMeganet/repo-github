#---------------------------------------------------Задание 1-----------------------------------------------------------
#1 Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

def payroll ():
    from sys import argv
    script_name, prod_in_h, pay_per_hour, premium = argv
    return f"Заработная плата составила: {int(prod_in_h)*int(pay_per_hour) + int(premium)} за {prod_in_h} часов, с учетом премии {premium}"

print(payroll())

#---------------------------------------------------Задание 2-----------------------------------------------------------
#2 Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].
my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
result = [my_list[i] for i in range(len(my_list)) if i > 0 and my_list[i] > my_list[i-1]]
print(result)

#---------------------------------------------------Задание 3-----------------------------------------------------------
#3 Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.
print([el for el in range(20, 240) if el%20 == 0 or el%21 == 0])

#---------------------------------------------------Задание 4-----------------------------------------------------------
#4 Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел,
# соответствующих требованию. Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
source_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print([el for el in source_list if source_list.count(el) == 1])

#---------------------------------------------------Задание 5-----------------------------------------------------------
#5 Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().
from functools import reduce

def my_func (el1, el2):
    return el1 * el2

print(reduce(my_func, [el for el in range(100, 1001) if el%2 == 0]))

#---------------------------------------------------Задание 6-----------------------------------------------------------
#6 Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.

# а)
def iterator(start, end):
    from itertools import count
    for el in count(start):
        if el <= end:
            print(el)
        else:
            break

print(iterator(5, 50))

# Усложненное без break:
def iterator2 (start, end):
    while start <= end:
        print(start)
        start += 1

print(iterator2(5, 20))

# б)
def list_iterator (some_list, rounds):
    from itertools import cycle
    round = 0
    count = 1
    for el in cycle(some_list):
        if round < rounds:
            if count == len(some_list):
                round += 1
                count = 1
                print(el)
            else:
                count += 1
                print(el)
        else:
            break

print(list_iterator([1,2,3,4,5], 2))

# Усложненное без break:

def list_iterator2 (some_list, rounds):
    count = 0
    round = 1
    while round <= rounds:
        print(some_list[count])
        count += 1
        if count == len(some_list):
            round += 1
            count = 0

print (list_iterator2([1, 2, 3, 4], 5))

# Объединенные а) и б) в одно решение, без использования break:

def iterator3 (start_num_or_list, end_num_or_rounds):
    try:
        if type(start_num_or_list) == int:
            while start_num_or_list <= end_num_or_rounds:
                print(start_num_or_list)
                start_num_or_list += 1
        elif type(start_num_or_list) == list:
            count = 0
            round = 1
            while round <= end_num_or_rounds:
                print(start_num_or_list[count])
                count += 1
                if count == len(start_num_or_list):
                    round += 1
                    count = 0
    except ValueError:
        print("Вы ввели некорректное значение")
    except TypeError:
        print("Вы ввели некорректное значение")

print(iterator3(5, 50))
print(iterator3([1, 2, 3], 4))

#---------------------------------------------------Задание 7-----------------------------------------------------------
#7 Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться
# следующим образом: for el in fact(n). Функция отвечает за получение факториала числа, а в цикле
# необходимо выводить только первые n чисел, начиная с 1! и до n!.
#Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(n):
    from functools import reduce
    my_list = []
    for e in range(1, n+1):
        my_list.append(e)
        yield f"{e}! = {reduce(lambda a, b: a*b, my_list[0:e])}"

for el in fact(8):
    print(el)
